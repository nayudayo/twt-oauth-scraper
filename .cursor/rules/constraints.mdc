---
description: 
globs: 
---
---
description: the constraints prompt engineering
globs: *
---
---
description: 
globs: 
---

<?xml version="1.0" encoding="UTF-8"?>
<constraints>
  <metadata>
    <description>Development constraints and prompt engineering guidelines</description>
    <globs>*</globs>
  </metadata>

  <core_principles>
    <principle id="scope_control">
      <name>Scope Control</name>
      <rules>
        <rule>Only modify files directly relevant to the task</rule>
        <rule>Maintain clear boundaries between components</rule>
        <rule>Document any indirect impacts on other modules</rule>
      </rules>
    </principle>

    <principle id="incremental_development">
      <name>Incremental Development</name>
      <rules>
        <rule>Build upon existing implementations</rule>
        <rule>Preserve working functionality</rule>
        <rule>Document reasons for any divergence from existing patterns</rule>
      </rules>
    </principle>

    <principle id="atomic_changes">
      <name>Atomic Changes</name>
      <rules>
        <rule>Modify one component/function at a time</rule>
        <rule>Complete validation before moving to next change</rule>
        <rule>Keep changes focused and independent</rule>
      </rules>
    </principle>

    <principle id="code_quality">
      <name>Code Quality</name>
      <rules>
        <rule>Fix linter errors before marking tasks complete</rule>
        <rule>Maintain type safety throughout changes</rule>
        <rule>Follow established code style patterns</rule>
      </rules>
    </principle>

    <principle id="documentation">
      <name>Documentation</name>
      <rules>
        <rule>Update relevant .md plan files</rule>
        <rule>Document key decisions and trade-offs</rule>
        <rule>Add inline comments for complex logic</rule>
        <rule>Update API documentation if endpoints change</rule>
      </rules>
    </principle>
  </core_principles>

  <validation>
    <checklist>
      <item>Changes limited to relevant files</item>
      <item>Built upon existing patterns where possible</item>
      <item>Changes are atomic and focused</item>
      <item>All linter errors resolved</item>
      <item>Documentation updated</item>
      <item>No breaking changes to public APIs</item>
    </checklist>
  </validation>

  <error_prevention>
    <phase id="before_changes">
      <name>Before Changes</name>
      <steps>
        <step>Review existing implementation</step>
        <step>Identify dependencies</step>
        <step>Plan atomic change steps</step>
        <step>Document expected outcomes</step>
      </steps>
    </phase>

    <phase id="during_changes">
      <name>During Changes</name>
      <steps>
        <step>One component at a time</step>
        <step>Continuous linting</step>
        <step>Document decisions</step>
      </steps>
    </phase>

    <phase id="after_changes">
      <name>After Changes</name>
      <steps>
        <step>Full validation</step>
        <step>Documentation review</step>
        <step>Impact assessment</step>
      </steps>
    </phase>
  </error_prevention>

  <best_practices>
    <category id="code_changes">
      <name>Code Changes</name>
      <practices>
        <practice>Prefer small, focused changes</practice>
        <practice>Maintain backward compatibility</practice>
        <practice>Add migration paths if needed</practice>
        <practice>Use type-safe approaches</practice>
      </practices>
    </category>

    <category id="documentation">
      <name>Documentation</name>
      <practices>
        <practice>Keep .md files up to date</practice>
        <practice>Document breaking changes</practice>
        <practice>Update API documentation</practice>
        <practice>Add inline comments for complexity</practice>
      </practices>
    </category>
  </best_practices>

  <rollback>
    <steps>
      <step>Document current state</step>
      <step>Plan rollback steps</step>
      <step>Keep backup of critical data</step>
    </steps>
  </rollback>
</constraints>